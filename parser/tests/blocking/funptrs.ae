
#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"

struct mystruct
{
    __blocking int (*myfun)(int a);
    int a;
};

typedef struct
{
	char *str;
	struct mystruct *p;
	int b;
} mytype;

typedef mytype ttype;

static __blocking int blocking1(int a)
{
    int ret;
    int b = a;

    ret = btest1(&a);
    assert(ret == 0);
    assert(a == (b + 1));

    return 0;
}

static __blocking int do_blocking(struct mystruct *s)
{
    return s->myfun(s->a);
};

static __blocking int do_mtype_blocking(mytype *t)
{
    return t->p->myfun(t->b);
}

static __blocking int do_ttype_blocking(ttype *t)
{
    return t->p->myfun(t->b);
}

typedef ttype atype;

static __blocking int do_atype_blocking(atype *t)
{
    return t->p->myfun(t->b);
}

static int done = 0;
static void *myptr;

static void basic_cb(void *ptr, int a)
{
    assert(myptr == ptr);
    printf("done\n");
    done = 1;
}

int main(int argc, char *argv[])
{
	ae_op_id_t id;
	struct mystruct s;
	mytype t;
	myptr = malloc(1);

	btest_init();

	s.myfun = blocking1;
	s.a = 0;
        ae_post_blocking(do_blocking, basic_cb, myptr, NULL, NULL, &id, &s);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	done = 0;
	t.p = &s;
	t.b = 100;
        ae_post_blocking(do_mtype_blocking, basic_cb, myptr, NULL, NULL, &id, &t);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	done = 0;
	t.p = &s;
	t.b = 100;

        ae_post_blocking(do_ttype_blocking, basic_cb, myptr, NULL, NULL, &id, &t);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	done = 0;
	t.p = &s;
	t.b = 100;

        ae_post_blocking(do_atype_blocking, basic_cb, myptr, NULL, NULL, &id, &t);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	btest_finalize();
	free(myptr);

	return 0;
}
