/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */


#include <aesop/aesop.h>
#include "parser/tests/blocking/btest.hae"

struct mystruct
{
    __blocking int (*myfun)(int a);
/* see ticket #213 in Triton; aesop doesn't seem to allow function pointers
 * to return void (produces a warning at compile time
 */
#if 0
    __blocking void (*myfun2)(int a);
#endif
    int a;
};

typedef struct
{
	char *str;
	struct mystruct *p;
	int b;
} mytype;

typedef mytype ttype;

static __blocking int blocking1(int a)
{
    int ret;
    int b = a;

    ret = btest1(&a);
    assert(ret == 0);
    assert(a == (b + 1));

    return 0;
}


/* see ticket #213 in Triton; aesop doesn't seem to allow function pointers
 * to return void (produces a warning at compile time
 */
#if 0
static __blocking void blocking2(int a)
{
    int ret;
    int b = a;

    ret = btest1(&a);
    assert(ret == 0);
    assert(a == (b + 1));

    return;
}
#endif

static __blocking int do_blocking(struct mystruct *s)
{
    return s->myfun(s->a);
};

static __blocking int do_mtype_blocking(mytype *t)
{
    return t->p->myfun(t->b);
}

static __blocking int do_ttype_blocking(ttype *t)
{
    return t->p->myfun(t->b);
}

typedef ttype atype;

static __blocking int do_atype_blocking(atype *t)
{
    return t->p->myfun(t->b);
}

__blocking int aesop_main(int argc, char **argv)
{
    struct mystruct s;
    mytype t;
    
    btest_init();

    s.myfun = blocking1;
/* see ticket #213 in Triton; aesop doesn't seem to allow function pointers
 * to return void (produces a warning at compile time
 */
#if 0
    s.myfun2 = blocking2;
#endif
    s.a = 0;
    do_blocking(&s);

    t.p = &s;
    t.b = 100;
    do_mtype_blocking(&t);

    t.p = &s;
    t.b = 100;
    do_ttype_blocking(&t);

    t.p = &s;
    t.b = 100;
    do_atype_blocking(&t);
    btest_finalize();

    return 0;
}
aesop_main_set(aesop_main);


/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
