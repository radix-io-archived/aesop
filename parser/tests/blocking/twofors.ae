
#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"

int val = 0;

static __blocking void run_twofors(void)
{
	int i, j, ret;
	int a = 0;
	
	for(i = 100; i > 0; --i)
	{
		for(j = 0; j < 100; ++j)
		{
			if(val == 0)
			{
				printf("no calls\n");
			}
			else if(val == 1)
			{
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*300+j*3+1);
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*300+j*3+2);
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*300+j*3+3);

			}
			else if(val == 2)
			{
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+2);
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+4);
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+6);
			}
			else if(val == 3)
			{
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*900+j*9+3);
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*900+j*9+6);
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*900+j*9+9);
			}
			else
			{
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+1);
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+3);
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+6);
			}
		}
	}
}
	
static int done = 0;
static void basic_cb(void *ptr)
{
    printf("%p\n", ptr);
    printf("done\n");
    done = 1;
}

int main(int argc, char *argv[])
{
	ae_op_id_t op_id;
	void *myptr = malloc(1);

	btest_init();
	printf("%p\n", myptr);

	val = atoi(argv[1]);
	run_twofors_post(basic_cb, myptr, NULL, NULL, &op_id);

	while(done == 0)
	{
	    ae_poll(NULL, 0);
	}
	btest_finalize();
	free(myptr);
	return 0;
}
