
#include "aesop.h"
#include "parser/tests/blocking/btest.hae"
#include <assert.h>
#include "aesop-support.hae"

static __blocking void run_par1(void)
{
	int a = 0, b = 0, c = 0;
	int ret1, ret2, ret3;

	pwait
	{
	    pbranch
	    {
		ret1 = btest_forever();
                if(ret1 != 0)
                {
                    printf("pbranch cancelled.\n");
                    /* NOTE: In this case we know that another branch is
                     * already calling aesop_cancel_branches_wait().  If we 
                     * were to call aesop_cancel_branches_wait() here also,
                     * then the program would deadlock because two
                     * pbranches would both be waiting for the other to exit
                     * before continuing.  Since we know that the other
                     * branch is taking care of the cancel we can just break
                     * out here.
                     */
                    pbreak;
                }

                assert(0);
                ret1 = btest2(&a);
                if(ret1 != 0)
                {
                    printf("Error in branch 1.\n");
                }
	    }

	    pbranch
	    {
                ret2 = btest1(&b);
                if(ret2 != 0)
                {
                    printf("Error in branch 2.\n");
                    aesop_cancel_branches_wait();
                    pbreak;
                    assert(0);
                }

                ret2 = btest2(&b);
                if(ret2 != 0)
                {
                    printf("Error in branch 2.\n");
                    aesop_cancel_branches_wait();
                    pbreak;
                }

                ret2 = btest_forever();
                if(ret2 != 0)
                {
                    pbreak;
                }

                assert(0);
	    }
	
	    pbranch
	    {
                aesop_cancel_branches_wait();
                pbreak;
                assert(0);

                ret3 = btest2(&c);
                if(ret3 != 0)
                {
                    printf("Error in branch 3.\n");
                }
	    }
	}

	printf("pwait done\n");
}

__blocking int aesop_main(int argc, char **argv)
{
    run_par1();
    return 0;
}
aesop_main_set(aesop_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

