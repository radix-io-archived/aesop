
#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"
#include <assert.h>

static __blocking void run_par1(void)
{
	int a = 0, b = 0, c = 0;
	int ret1, ret2, ret3;

	pwait
	{
	    pbranch
	    {
		ret1 = btest1(&a);
                if(ret1 != 0)
                {
                    printf("Error in branch 1.\n");
                    pbreak;
                }

                ret1 = btest2(&a);
                assert(0);
                if(ret1 != 0)
                {
                    printf("Error in branch 1.\n");
                    pbreak;
                }
	    }

	    pbranch
	    {
                ret2 = btest1(&b);
                if(ret2 != 0)
                {
                    printf("Error in branch 2.\n");
                    pbreak;
                }

                ret2 = btest2(&b);
                assert(0);
                if(ret2 != 0)
                {
                    printf("Error in branch 2.\n");
                    pbreak;
                }
	    }
	
	    pbranch
	    {
                pbreak;

                ret3 = btest2(&c);
                if(ret3 != 0)
                {
                    printf("Error in branch 3.\n");
                    pbreak;
                }
	    }
	}

	printf("pwait done\n");
}

static int done = 0;
static void basic_cb(void *ptr)
{
    printf("%p\n", ptr);
    printf("done\n");
    done = 1;
}

int main(int argc, char *argv[])
{
	ae_op_id_t op_id;
	void *myptr = malloc(1);

	btest_init();
	printf("%p\n", myptr);
	ae_post_blocking(run_par1, basic_cb, myptr, NULL, NULL, &op_id);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	btest_finalize();
	free(myptr);
	return 0;
}

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

