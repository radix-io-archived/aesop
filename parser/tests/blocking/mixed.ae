/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#include <aesop/aesop.h>
#include "parser/tests/blocking/btest.hae"
#include <assert.h>

int val = 0;
int printflag = 1;

static __blocking void run_mixed(void)
{
	int i, j;
	int a = 0;
	int ret;
	
	i = 100;
	while(i > 0)
	{
		for(j = 0; j < 100; ++j)
		{
			if(val == 0)
			{
                                if(printflag == 1)
                                {
				    printf("no calls\n");
                                    printflag = 0;
                                }
			}
			else if(val == 1)
			{
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*300+j*3+1);
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*300+j*3+2);
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*300+j*3+3);
			}
			else if(val == 2)
			{
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+2);
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+4);
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+6);
			}
			else if(val == 3)
			{
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*900+j*9+3);
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*900+j*9+6);
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*900+j*9+9);
			}
			else
			{
				ret = btest1(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+1);
				ret = btest2(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+3);
				ret = btest3(&a);
				assert(ret == 0);
				assert(a == (100-i)*600+j*6+6);
			}
		}
		--i;
	}
}

__blocking int aesop_main(int argc, char **argv)
{
    btest_init();
    run_mixed();
    btest_finalize();
    return 0;
}
aesop_main_set(aesop_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
