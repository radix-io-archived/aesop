#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"

static __blocking void run_whileloop(void)
{
	int i, ret;
	int a = 0, b = 0, c = 0;
	
	i = 100;
	while(i > 0)
	{
            pwait
            {
                pbranch
                {
                    ret = btest1(&a);
                    assert(ret == 0);
                    assert(a == ((100-i)+1));
                }

                pbranch
                {
                    ret = btest2(&b);
                    assert(ret == 0);
                    assert(b == ((100-i)*2+2));
                }

                pbranch
                {
                    ret = btest3(&c);
                    assert(ret == 0);
                    assert(c == ((100-i)*3+3));
                }
            }

            --i;
	}
}
	
static int done = 0;

static void basic_cb(void *ptr)
{
    printf("%p\n", ptr);
    printf("done\n");
    done = 1;
}

int main(int argc, char *argv[])
{
	ae_op_id_t op_id;
	void *myptr = malloc(1);

	btest_init();
	printf("%p\n", myptr);
	ae_post_blocking(run_whileloop, basic_cb, myptr, NULL, NULL, &op_id);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
	}

	btest_finalize();
	free(myptr);
	return 0;
}
