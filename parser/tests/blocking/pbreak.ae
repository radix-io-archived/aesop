#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"
#include <assert.h>

static __blocking void run_pbreak(void)
{
	int a = 0, b = 0, c = 0;
	int ret1, ret2, ret3, ret4;

	pwait
	{
	    pbranch
	    {
		ret1 = btest1(&a);
		assert(ret1 == 0);
		assert(a == 1);
	    }

	    pbranch
	    {
		ret2 = btest2(&b);
		assert(ret2 == 0);
		assert(b == 2);
		ret2 = btest_forever();
		assert(ret2 != 0);
	    }
	
	    pbranch
	    {
		ret3 = btest3(&c);
		assert(ret3 == 0);
		assert(c == 3);
		ret3 = btest1(&c);
		assert(ret3 == 0);
		assert(c == 4);
	    }

	    pbranch
	    {
		ret4 = btest_sleep(4);
		assert(ret4 == 0);
		pbreak;
	    }
	}

	printf("pwait done\n");
}

static int done = 0;
static void basic_cb(void *ptr)
{
    printf("%p\n", ptr);
    printf("done\n");
    done = 1;
}

int main(int argc, char *argv[])
{
	ae_op_id_t op_id;
	void *myptr = malloc(1);

	btest_init();
	printf("%p\n", myptr);
	run_pbreak_post(basic_cb, myptr, NULL, NULL, &op_id);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	btest_finalize();
	free(myptr);
	return 0;
}
