/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#include <assert.h>

#include <aesop/aesop.h>
#include <aesop/timer.hae>
#include "parser/tests/blocking/btest.hae"

static __blocking void lonely_pbranch(void)
{
	int a = 0;
	int ret1;
        int ret;
        int foo;

        pbranch
        {
                ret1 = btest1(&a);
                if(ret1 != 0)
                {
                        printf("Error in branch 1.\n");
                }

                ret1 = btest2(&a);
                if(ret1 != 0)
                {
                        printf("Error in branch 1.\n");
                }
                
                /* start a timer to make sure that the pbranch is
                 * still active after this function returns
                 */
                ret = aesop_timer(2000);
                if(ret != 0)
                {
                     printf("Error in branch 1 while sleeping\n");
                }
                
                /* access a variable that is scoped to the function (not the
                 * pbranch) to make sure nothing breaks 
                 */
                foo = 1;
                printf("pbranch done!\n");
        }

        ret1 = btest1(&a);
        if(ret1 != 0)
        {
            printf("Error in final btest1\n");
        }

        printf("lonely_pbranch function done! returning (with pbranch still running)...\n");
}

__blocking int aesop_main(int argc, char **argv)
{
    lonely_pbranch();
    /* start a timer to wait for the lonely pbranch to finish */
    printf("Sleeping 5 seconds to wait for pbranch to finish.\n");
    aesop_timer(5000);
    printf("Test complete.\n");
    return 0;
}
aesop_main_set(aesop_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

