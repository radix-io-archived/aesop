#ifndef __BTEST_AEH__
#define __BTEST_AEH__

#include <stdlib.h>
#include <stdio.h>
#include "src/aesop/aesop.h"
#include "src/aesop/op.h"

/* These interfaces are used to test the gsl code for correctness.  They
 * emulate a basic resource with blocking functions, using different completion
 * techniques (queue/polling, threads, immediate completion).
 */

/* These three functions increment the integer pointer by 1, 2, and 3 respectively,
 * by first storing the operation on a queue and completing the operation through
 * a poll call.
 */

__blocking int btest1(int *a);
__blocking int btest2(int *b);
__blocking int btest3(int *c);

/* This function increments the integer by one each time it is called.  The
 * first 9 times it will return TRITON_ERR_AGAIN, the 10th time (and
 * subsequent times) it will return TRITON_SUCCESS
 */
__blocking triton_ret_t btest_fail10(int *d);

/* This function sleeps for the specified seconds.  This is implemented by putting
 * the operation on queue, and performing the sleep() call at polling time.
 */
__blocking int btest_sleep(int secs);

/* This function is a blocking function that never returns, but can be cancelled.
 * The operation is placed on a queue, and if a call to ae_cancel occurs the operation
 * is completed, otherwise the operation remains on the queue indefinitely.
 */
__blocking int btest_forever(void);

/* This function simply returns a random value.  The operation is first placed
 * on a queue, and during polling the random value is calculated and the operation
 * completed.
 */
__blocking int btest_random(void);

/* This function sleeps for a random number of microsecs (up to 1 sec) before returning.
 * The operation is placed on a queue, and during polling, the random value is calculated,
 * the sleep is performed, and then the operation is completed.
 */
__blocking int btest_sleep_random(void);

/* this function modifies the cancel behavior in the btest resource so that
 * it attempts to trigger the callback directly.
 */
void btest_enable_immediate_cancel(void);


/* This function tests immediate completion.  It increments the parameter passed in
 * directly in the post function and calls the callback from the post function, returning
 * the TRITON_COMPLETE value instead of TRITON_POSTED.
 */
__blocking int ictest1(int *a);

/* Also tests immediate completion, but sleeps for a random number of microsecs
 * (up to 1 sec) before completing immediately.
 */
__blocking int ictest_random();

/* This function tests completion in a separate thread, where the completion callback may
 * be called before the post call actually completes.  The post call starts a thread that
 * increments the value and calls the callback.  After the post call starts the thread it
 * sleeps for 1000 microseconds before returning TRITON_POSTED.
 */
__blocking int tctest1(int *a);

/* Also tests completion in a separate thread, but sleeps for a random number of microsecs
 * (up to 1 sec) before calling the callback, and sleeps for a (different) random number
 * of microsecs (also up to 1 sec) before returning from the post call.
 */
__blocking int tctest_random();

#define btest_main_set(__main_blocking_function__, ...) \
static int __main_done=0; \
static int __main_ret; \
static void __main_cb(void *user_ptr, int t) \
{ \
      ae_context_t ctx = (ae_context_t)user_ptr; \
      __main_done = 1; \
      __main_ret = t; \
      ae_poll_break(ctx); \
} \
void btest_init_register(void); \
int main(int argc, char **argv)  \
{ \
    ae_context_t __main_ctx; \
    ae_hints_t __main_hints; \
    ae_op_id_t __main_opid; \
    triton_ret_t tret; \
    int ret; \
    btest_init_register(); \
    tret = aesop_init("btest"); \
    triton_error_assert(tret); \
    tret = ae_context_create(&__main_ctx, __VA_ARGS__); \
    triton_error_assert(tret); \
    ret = ae_hints_init(&__main_hints); \
    assert(ret == 0); \
    tret = ae_post_blocking(__main_blocking_function__, __main_cb, __main_ctx, &__main_hints, __main_ctx, &__main_opid, &__main_ret, argc, argv); \
    triton_error_assert(tret); \
    while(!__main_done) \
    { \
        tret = ae_poll(__main_ctx, 100); \
        triton_error_assert(tret); \
    } \
    ae_hints_destroy(&__main_hints); \
    ae_context_destroy(__main_ctx); \
    aesop_finalize(); \
    return __main_ret; \
}
   
#endif
