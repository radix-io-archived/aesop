#include "aesop.h"
#include "parser/tests/blocking/btest.hae"
#include "aesop-support.hae"

static __blocking void run_pbreak2(void)
{
	int a = 0, b = 0, shared = 0;
	int ret;

	pwait
	{
	    pbranch
	    {
		ret = btest1(&a);
		assert(ret == 0);
		assert(a == 1);
		shared += a;
		printf("before pbreak: a == %d!\n", a);
		if(shared > 2)
		{
                    aesop_cancel_branches_wait();
		    pbreak;
		}
		ret = btest2(&a);
		assert(ret == 0);
		assert(a == 3);
	    }

	    pbranch
	    {
		ret = btest3(&b);
		assert(ret == 0);
		assert(b == 3);
		shared += b;

		ret = btest1(&b);
		assert(ret == 0);
		assert(b == 4);
	    }
	}

	printf("pwait done\n");
}

__blocking int aesop_main(int argc, char **argv)
{
    run_pbreak2();
    return 0;
}
aesop_main_set(aesop_main, "btest", "timer");

