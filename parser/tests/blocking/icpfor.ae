#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"

static __blocking void run_parfor(void)
{
	int a[100];
	int ret[100];

        memset(a, 0, sizeof(int)*100);
	memset(ret, 0, sizeof(int)*100);

	pwait
	{
		pprivate int i, j;
		for(i = 0; i < 100; ++i)
		{
			pbranch
			{
				j = i;
				a[i] = i;
				ret[i] = ictest1(&a[i]);
				assert(ret[i] == 0);
				assert(a[i] == (i+1));
			}
		}
	}

	printf("pwait done\n");
}

static int done = 0;
static void basic_cb(void *ptr)
{
    printf("%p\n", ptr);
    printf("done\n");
    done = 1;
}

int main(int argc, char *argv[])
{
	ae_op_id_t op_id;
	void *myptr = malloc(1);

	btest_init();
	printf("%p\n", myptr);
	run_parfor(basic_cb, myptr, NULL, NULL, &op_id);

	while(done == 0)
        {
	    ae_poll(NULL, 0);
        }

	btest_finalize();
	free(myptr);
	return 0;
}
