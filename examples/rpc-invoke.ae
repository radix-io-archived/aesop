
#include "src/aesop/aesop.h"
#include "src/aesop/parser/tests/blocking/btest.hae"
#include "src/common/resources/timer/timer.hae"

__blocking static int rpc_invoke()
{
    int a = 0;
    int randval, val, ret;

    randval = btest_random();
    val = randval % 3;
    printf("RANDOM VALUE: %d\n", val);
    if(0 == val)
    {
	ret = btest1(&a);
    }
    else if(1 == val)
    {
	ret = btest2(&a);
    }
    else if(2 == val)
    {
	ret = btest3(&a);
    }

    assert(ret == 0);
    assert((a-1) == val);
    return randval;
}

__blocking static void invoke_many(int count)
{
    pwait
    {
	int i;
	for(i = 0; i < count; ++i)
	{
	    pbranch { rpc_invoke(); }
	}
    }
}

static int running = 1;

__blocking static void many_looping()
{
    pwait
    {
	int i;
	
	/* startup 100 looping invocations */
	i = 0;
	while(i < 100)
	{
	    pbranch
	    {
	        int j = 0;

		while(running)
		{
		    rpc_invoke();
		    printf("invoke: %d, %d\n", i, j++);
		}
	    }
	    ++i;
	}

	/* let those loop for a bit */
	pbranch
	{
	    triton_timer(10000);
	    running = 0;
	}
    }
}
__blocking int aesop_main(int argc, char **argv)
{
    pwait
    {
        pprivate int i;

        for(i = 0; i < 100; ++i)
        {
            pbranch { rpc_invoke(); }
        }
    }

    invoke_many(200);

    many_looping();

    return 0;
}
btest_main_set(aesop_main, "btest", "timer");

