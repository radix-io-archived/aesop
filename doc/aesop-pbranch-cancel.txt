Aesop: how to cancel pbranches
==============================

== Existing implementation: Oct. 2011

for some context, here is an example of how things are done currently 
(this is a client doing an RPC):

[source,c]
----
pwait 
{
    pbranch 
    {
        ret = timer();
        /* if timer triggers, then cancel other branches */
        if(ret == SUCCESS)
            aesop_cancel_branches_wait();
    }
    pbranch
    {
        ret = recv();
        /* cancel other branches in any case except when we detect that
         * another branch has already started cancelling.
         */
        if(ret != CANCELLED)
            aesop_cancel_branches_wait();
    }
    pbranch
    {
        ret = send();
        /* cancel branches on send error except when we detect that another
         * branch has already started cancelling.
         */
        if(ret != CANCELLED && ret != SUCCESS)
            aesop_cancel_branches_wait();
    }
}
----

The aesop_cancel_branches_wait() works by trying to cancel pbranches in
a loop (with a timer) until the pbranch count hits 1.  It has to have a
loop because "signaling" the other pbranches is lossy; there is no
way to guarantee that a pbranch cancel will be honored.  It might hit
a pbranch that isn't currently in a blocking call.

Problems with the current implementation:

* if two pbranches call cancel simultaneously, it will deadlock
* there are some race conditions re: if a pbranch will detect if it has been
  cancelled or not
* the cancel implementation is kludgey and more expensive than it needs to
  be because of the timer loop
* semantics are unclear, especially at the aesop resource level
* if the send happens to complete (successfully) after the recv completes,
  due to network transport ordering issues, then the
  aesop_cancel_branches_wait() call after the recv might be triggered too
  early

== New semantics

=== Semantics of the aesop-level cancel:
* totally asynchronous (no longer blocks until pbranches exit)
* cancel signal to pbranch is guaranteed to be delivered exactly once
* Cancel sets a flag in the execution context of the pbranch
** will affect current resource operation (if present), calling the cancel
   function of the resource.
** If no resource call is active, it will simply set the flag in the execution
context.
** The cancel flag remains in the pbranch execution context. Currently we do
not plan to provide a way to clear the flag.
** The resources are responsible for checking the flag in the post functions,
and return immediately with an appropriate error code if they detect the
cancel flag is set.

* cancel will return AE_SUCCESS if it succeeded in delivering the cancel request,
  AE_ERR_EXIST if it detects that another pbranch *at the same scope or higher* 
  already issued a cancel
** it is Ok if a child pbranch already is already cancelled in its own 
   scope; just skip that one and return success anyway

* caller can ignore cancel return code if it doesn't care (most codes will
  not)
* illegal to call cancel from a lonely pbranch

=== Semantics of the resource-level cancel function:
* totally asynchronous
* returns true if it delivered the cancel signal to the operation in
  question (and the operation is guaranteed to return ECANCEL or 
  whatever is appropriate for the resource)
* returns false if it failed to cancel the operation in question
* cancel function is no longer allowed to call the op callback directly (this complicates 
  some possible deadlock scenarios)

=== Aesop internal implementation details:
* serialize calls to cancel (so that only one pbranch will "win")
* set flag at the pwait level to indicate that the branches have been
  cancelled (or return failure if flag already set)
* for each pbranch:
** atomically check for resource op id (and make sure no posts happen
   concurrently)
*** if op id present, try resource cancel
**** if success, done
**** if fail, set flag in ctrl structure to say pbranch should cancel
*** if op id not present, set flag in ctrl structure to say pbranch should
      cancel
** proceed recursively, setting flag in child pbranches in the same manner

=== Semantics of the resource-level post functions:
* will have hook to check parent ctrl structure cancel flag
* if detect that pbranch has cancelled, the post should immediately fail
  with appropriate return code for resource

=== Misc:
* provide helper functions is_cancelled() so a pbranch
  can check it's cancelled status manually if it wants to
* One possible implementation idea is to treat child pwait blocks as
  resources, so that they generate op ids and have a cancel function just
  like a resource call.  Might make the aesop code a little cleaner in
  exchange for pushing some complexity elsewhere.  Need to look at code to
  see if this is worth doing or not.
* A possible extension to this document, would be to name each pbranch and
  add the ability to cancel specific pbranches by name.  Probably not that
  hard to implement, but we don't have a clear use case yet.

Example using new semantics:

[source,c]
----

while(retry)
{
    /* the send and recv are grouped into a single function
     * (do_communication) to make it clearer that we want both to complete
     * before cancelling the timer.
     *
     * The aesop_cancel_branches() call is safe against race conditions, so
     * neither pbranch has to check if it has been cancelled before
     * initiating an aesop_cancel_branches() of its own.
     */
    pwait 
    {
        pbranch 
        {
            ret = timer();
            aesop_cancel_branches();
        }
        
        pbranch
        {
            comm_ret = do_communication()
            aesop_cancel_branches();
        }
    }
}


do_communication()
{
    pwait
    {
        pbranch
        {
            recv_ret = recv();
        }
        pbranch
        {
            send_ret = send();
            if(ret != SUCCESS)
                aesop_cancel_branches();
        }
    }

    return(whatever);
}

----

Example resource cancel semantics:

[source,c]
----

triton_ret_t resource_post(void)
{
    /* don't start op if we have a pending, undelivered cancel signal */
    if(test_cancelled_state())
        return(ECANCELLED);  

    /* do whatever .... */
}

triton_ret_t resource_cancel(op_id)
{
    /* lock to protect against post/callback/cancel races */

    if(queued)
        /* move to cancelled queue, return success */

    if(callback already in progress)
        /* return failure */

    if(cant find operation)
        /* return failure */

}

----

