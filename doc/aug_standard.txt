
[[ref-library]]
The Aesop Standard Library
==========================

Aesop System Interfaces and Tools
----------------------------------

Configuration Interface
~~~~~~~~~~~~~~~~~~~~~~~

Aesop provides a unified interface to advertise and set configuration
parameters across code modules.

This section describes the Aesop user interface to this functionality; The low
level C interface used for system components is described in
<<ref-resource-configuration>>.

Querying and setting configuration parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following function can be used to set arbitrary configuration
parameters:

[source,c]
----
int aesop_set_config(const char* key, const char* value);
----

The `key` argument is the name of the configuration parameter to be set,
while the `value` argument is the new value for that configuration
parameter.  All values must be provided as strings.  The function returns 0
on success, `AE_ERR_NOT_FOUND` if the key is not known to Aesop, or
`AE_ERR_INVAL` if the key is valid but the value is not. 

There is currently no corresponding function to query a configuration
parameter or list available keys (as of February 2012), although this will be 
added in future versions of Aesop.


Debugging
~~~~~~~~~~

// TODO: talk about problem using gdb



The code injected by the aesop translator supports writing tracing
information to `stderr`.

The following components can be traced:

[cols=">1,6", frame="none", grid="none"]
|=====

| *blocking* | Outputs when a blocking call is initiated and finished.

| |

| *cancel*  |  Outputs information regarding cancellation of blocking calls.

| |

| *pbranch* | Tracks the creation and completion of pbranches.

|=====

The `aesop_set_debugging` call can be used to enable or disable tracing for a component.

[source,c]
----
int aesop_set_debugging (const char * what, int value);
----

The `what` argument can be either one of the following strings:

* `"ae_blocking"`
* `"ae_pbranch"`
* `"ae_cancel"`

The `value` parameter can be set to `1` or `0`, in order to respectively
enable or disable tracing.


//=====================================================================
Standard Aesop modules
-----------------------
//=====================================================================

The following modules are bundled with the aesop distribution.

[[ref-timer]]
Timer
~~~~~~

Header: `timer.hae`


[source,c]
----
int aesop_timer_init(void);
void aesop_timer_finalize(void);
-----

Before using any other timer function, the application is responsible for
calling `aesop_timer_init`. It is safe to call init more than once, as long
as one call to `aesop_timer_finalize` is made for every call to
`aesop_timer_init`.


[source,c]
-----
__blocking int aesop_timer(int millisecs);
----

The `aesop_timer` function will sleep for the given number of milliseconds.
The functions returns 0 on success, `-ECANCELED` if cancelled before the sleep
time is over.

Socket
~~~~~~

Header: `aesocket.hae`

[source,c]
-----
int aesocket_init (void);
int aesocket_finalize (void);
----

Module initialization functions.


[source,c]
----
int aesocket_prepare (int fd);
----

Before a socket can be used with the aesocket functions, it needs some tuning
(for example switching it to non-blocking mode).  The `aesocket_prepare`
function takes care of this.  This function might change the
blocking/non-blocking nature of the given descriptor.

[source,c]
----
__blocking int aesocket_accept(
    int sockfd,
    struct sockaddr *addr,
    socklen_t * addrlen,
    int *newfd,
    int * err);
----

In the aesop version of the accept system call,
unlike the system call, the descriptor for the new connection is returned in
`*newfd`, while an error, if any, is returned in `*err`.
The function returns `AE_SUCCESS` when a new connection is accepted,
`AE_ERR_CANCELED` if the call was cancelled and `AE_ERR_OTHER` if a system call
error occurred (returned in `*err`) occurred.

NOTE: It is not necessary to call `aesocket_prepare` on the descriptors
returned by this function.

[source,c]
-----
__blocking int aesocket_read(
    int fd,
    void *buf,
    size_t count,
    int *ret,
    int * err);
----
Read `count` bytes from the given socket. This call will not return
until an error occurred or `count` bytes were read from the socket.
The function returns `AE_SUCCESS` if the requested number of bytes was read,
`AE_ERR_CANCELED` if the call was cancelled and `AE_ERR_OTHER` if another error
occured, in which case `*err` is set to the POSIX error code. The number of
bytes read into `buf` is returned in `*ret`.



[source,c]
----
__blocking int aesocket_write(
    int fd,
    const void *buf,
    size_t count,
    int *ret,
    int * err);
----
Similar to `aesocket_read`, but writes data to the socket instead.

[source,c]
----
__blocking int aesocket_ready (int fd, int flags, int * err);
----

The `aesocket_ready` call waits until the passed in descriptor is ready to
perform the action specified in `flags`.
`Flags` can be a combination of `AESOCKET_READ` or `AESOCKET_WRITE`.
The function returns `AE_ERR_CANCELED` when cancelled, `AE_ERR_OTHER` when an
error was returned by the underlying system call, and `AE_SUCCESS` otherwise.
In case of `AE_ERR_OTHER`, the error code is stored in `*err`.

This function is used internally to implement the `aesocket_read`,
`aesocket_write` and `aesocket_accept` functions.




File
~~~~

Header: `aefile.hae`

[source,c]
----
int aefile_init(void);
void aefile_finalize(void);
----
As with the other code modules, the init function needs to be called before
calling any of the functions below. 



[source,c]
----
__blocking ssize_t aefile_pwrite(int fd, const void *buf, size_t count, off_t offset);
__blocking ssize_t aefile_pread(int fd, void *buf, size_t count, off_t offset);
__blocking int aefile_fsync(int fd);
__blocking int aefile_fdatasync(int fd);
__blocking int aefile_ftruncate(int fd, off_t length);
__blocking int aefile_unlink(const char *pathname);
----
These are aesop versions of the regular `pwrite`, `pread`, `fsync`,
`fdatasync`, `ftruncate` and `unlink` functions.

[NOTE]
====
These functions are currently implemented using a thread which calls the
regular POSIX I/O function. These functions cannot be cancelled once the
operation has started.
====


ResourceBuilder
~~~~~~~~~~~~~~~

Header: `resourcebuilder.hae`

[source,c]
----
void rb_slot_initialize (rb_slot_t * slot);
----

`rb_slot_t` is an opaque datatype.
Prepare a slot for use by the `rb_slot_capture` function.


[source,c]
----
__blocking int rb_slot_capture (rb_slot_t * slot);
----

This call will suspend execution until the call is cancelled or until
`rb_slot_complete` is called on the slot. A slot only supports a single
capture call (i.e. it is illegal to call capture on a slot that is already
captured). When the call is completed by a call to `rb_slot_complete`, this
function returns `AE_SUCCESS`, and `AE_ERR_CANCELED` when the call returns due
to a cancellation request.

After a call to this function, the slot needs to be destroyed (using
`rb_slot_destroy` and reinitialized before it can be used again.

[source,c]
----
int rb_slot_complete (rb_slot_t * slot);
----

Release a captured slot. This call returns `AE_SUCCESS` if it successfully
released a `rb_slot_capture` call on the slot. If the slot was not active (for
example because it was already cancelled), an unspecified aesop error code is
returned.

[source,c]
----
void rb_slot_destroy (rb_slot_t * slot);
----

Free resources associated with the slot. The slot must be inactive. It is
illegal to call this function on a slot that is currently captured.


[TIP]
====
The ResourceBuilder functions provide a low level toolkit used to build higher
level code. For example, the ResourceBuilder is used to implement the aesop
socket functions. ResourceBuilder is also a good basis for building
synchronization primitives, such as mutexes and semaphores.
====


thread
~~~~~~

WARNING: The thread module relies on internal details of the current aesop
implementation. Its use and interface might change in future versions.

Header: `aethread.hae`

The following functions are used to intialize and shut down the thread module.

[source,c]
----
int aethread_init(void);
void aethread_finalize(void);
----

The thread module provides the concept of a thread group. Groups are created
with a certain size, and cannot grow beyond this size.

[source,c]
----
struct aethread_group * aethread_create_group_pool(int size);
void aethread_destroy_group(struct aethread_group * group);
----


[source,c]
----
__blocking int aethread_hint(struct aethread_group * group);
----

The `aethread_hint` function is a blocking function which will complete when a
free thread can be found in the specified group. If all threads in the group
are in use, this function will wait until one becomes available.  When
returning from this call, *one of the threads of the specified group will be
used to continue execution*. With the current aesop translator, this means
that the code following the `aethread_hint` call will execute using one of the
threads of the group, until the thread becomes idle. 

[NOTE]
.Implementation Detail
====
In the current aesop implementation, a thread becomes idle when one of the
following happens:

* Entering a blocking call which cannot complete immediately.
* Finishing execution of a lonely pbranch.
* Waiting for other pbranches to complete in a `pwait`. The last thread to
  arrive at a `pwait` does _not_ become idle but will continue execution with
  the first statement following the `pwait` construct.
====

The `aethread_hint` function supports cancellation while waiting for a group
thread to become available. The function returns `AE_ERR_CANCELLED` when the
search was cancelled, or `AE_SUCCESS` in when execution successfully switched
to one of the group threads.

The thread module is mainly used to create an aesop blocking function (which
supports concurrent execution) from a long lived C function which would
otherwise force the calling thread to become idle.
See <<ref-thread>> for more details and an example.



