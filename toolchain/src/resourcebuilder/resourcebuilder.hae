/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#ifndef __RESOURCEBUILDER_RESOURCEBUILDER_HAE
#define __RESOURCEBUILDER_RESOURCEBUILDER_HAE

#include "src/resources/sem/sem.hae"

// #define RB_NO_OPA

struct rb_slot_t
{
   aesop_sem_t sem;
};

typedef struct rb_slot_t rb_slot_t;

/**
 * Initialize the ResourceBuilder component.
 */
int rb_init (void);

/**
 * Release the ResourceBuilder component
 */
void rb_finalize (void);


/**
 * Create a slot to hold the callback context.
 * Sets the private slot pointer.
 */
void rb_slot_initialize (rb_slot_t * slot);

int rb_slot_reinitialize (rb_slot_t * slot);

/**
 * Clears the state of the slot and
 * returns it to the uninitialized state
 */
void rb_slot_clear (rb_slot_t * slot);

/**
 * Complete the callback stored in a slot.
 * Does not release the private data.
 * Returns AE_SUCCESS if the slot completed, error code if the slot was or
 * already completed (due to cancel or reguler complete).
 */
int rb_slot_complete (rb_slot_t * slot);

/**
 * Free slot. Slot must be empty. Invalidates private data.
 */
void rb_slot_destroy (rb_slot_t * slot);

/**
 * Capture the caller's context into a slot.
 *
 * This call will block until the somebody calls rb_slot_complete on the slot.
 * Returns AE_SUCCESS if the slot completed normally, or an unspecified
 * AE_xxxx error code if it was cancelled.
 */
__blocking int rb_slot_capture (rb_slot_t * slot);

#endif

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
