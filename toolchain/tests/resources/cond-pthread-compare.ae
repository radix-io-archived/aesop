
#include <pthread.h>
#include <aesop/aesop.h>
#include <aesop/cond.hae>

static pthread_cond_t cond;
static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

static aesop_cond_t acond;
static triton_mutex_t cond_mutex = TRITON_MUTEX_INITIALIZER;

#define ITERATIONS 200
int  flag = 0;

static __blocking int cond_test(void)
{ 
    struct timeval t1, t2, diff;

    gettimeofday(&t1, NULL);
    pwait
    {
        int i;
	for(i = 0; i < ITERATIONS; ++i)
	{
		pbranch
		{
                    triton_mutex_lock(&cond_mutex);
                    while(!flag)
		        aesop_cond_wait(acond, &cond_mutex);
                    triton_mutex_unlock(&cond_mutex);
		}
	}
    }
    gettimeofday(&t2, NULL);
    diff.tv_sec = t2.tv_sec - t1.tv_sec;
    diff.tv_usec = t2.tv_usec - t1.tv_usec;
    if(t2.tv_usec < t1.tv_usec) 
    {
    	diff.tv_sec--;
	diff.tv_usec += 1e6;
    }
    printf("Aesop cond time: %d.%06d secs\n", (int)diff.tv_sec, (int)diff.tv_usec);
    return 0;
}
	
static void *thread_cb(void *up)
{
    pthread_mutex_lock(&mutex);
    while(!flag)
        pthread_cond_wait(&cond, &mutex);
    pthread_mutex_unlock(&mutex);

    return NULL;
}

static void thread_test(void)
{
    int i, ret;
    pthread_t tid[ITERATIONS];
    void *val;
    struct timeval t1, t2, diff;

    gettimeofday(&t1, NULL);
    for(i = 0; i < ITERATIONS; ++i)
    {
    	ret = pthread_create(&tid[i], NULL, thread_cb, NULL);
        if(ret != 0)
        {
            perror("pthread_create failed!\n");
            assert(ret == 0);
        }
    }

    pthread_mutex_lock(&mutex);
    flag = 1;
    pthread_cond_broadcast(&cond);
    pthread_mutex_unlock(&mutex);

    for(i = 0; i < ITERATIONS; ++i)
    {
        pthread_join(tid[i], &val);
    }
    gettimeofday(&t2, NULL);
    diff.tv_sec = t2.tv_sec - t1.tv_sec;
    diff.tv_usec = t2.tv_usec - t1.tv_usec;
    if(t2.tv_usec < t1.tv_usec) 
    {
    	diff.tv_sec--;
	diff.tv_usec += 1e6;
    }
    printf("thread time: %d.%06d secs\n", (int)diff.tv_sec, (int)diff.tv_usec);
}

__blocking int aesop_main(int argc, char **argv)
{
    int ret;

    aesop_cond_resource_init();

    aesop_cond_init(&acond);

    pwait
    {
        pbranch
        {
            ret = cond_test();
            assert(ret == 0);
        }
        pbranch
        {
            triton_mutex_lock(&cond_mutex);
            flag = 1;
            aesop_cond_notify_all(acond);
            triton_mutex_unlock(&cond_mutex);
        }
    }

    flag = 0;

    aesop_cond_destroy(acond);

    aesop_cond_resource_finalize();

    pthread_cond_init(&cond, NULL);
    thread_test();

    flag = 0;

    return 0;
}
aesop_main_set(aesop_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 expandtab
 */
