
#include "src/resources/sem/cond.hae"
#include <aesop/timer.hae>

struct limit_obj
{
    int ind;
};

static aesop_cond_t foo_cond;
static triton_mutex_t foo_mutex = TRITON_MUTEX_INITIALIZER;

__blocking int dolimit(struct limit_obj *obj);

static __blocking int dostuff(void)
{

    pwait
    {
        pbranch
        {
            int ret;

            triton_mutex_lock(&foo_mutex);
            ret = aesop_cond_wait(foo_cond, &foo_mutex);
            triton_mutex_unlock(&foo_mutex);

            assert(ret == AE_ERR_CANCELLED);
            printf("SUCCESS: aesop_cond_wait() returned AE_ERR_CANCELED.\n");
        }
        pbranch
        {
            aesop_timer(1000);
            printf("about to cancel...\n");
            aesop_cancel_branches();
        }
    }

    return 0;
}

__blocking int aesop_main(int argc, char **argv)
{
    int ret;

    aesop_cond_resource_init();
    aesop_timer_init();

    aesop_cond_init(&foo_cond);

    ret = dostuff();
    assert(ret == 0);

    aesop_timer_finalize();
    aesop_cond_resource_finalize();

    return ret;
}
aesop_main_set(aesop_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 expandtab
 */
