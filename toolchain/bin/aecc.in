#!/bin/bash

# find the location of this aecc script
AESOP_HOME="$( cd "$( dirname "$0" )" && cd .. && pwd )"
if [[ $? != 0 ]]; then
    echo "aecc: could not find AESOP_HOME!"
    exit 1
fi

if [[ -n ${AESOP_DEBUG} ]]; then
    echo "AESOP_HOME: $AESOP_HOME"
    verbose="yes"
fi

# aecc-utils should be in the same dir as aecc
source ${AESOP_HOME}/bin/aecc-utils
if [[ $? != 0 ]]; then
    echo "aecc: could not find aecc-utils!"
    exit 1
fi

setUsageMessage "Usage: aecc <options> <file> -- <compiler options>.  Specify --ae-help for a list of options."

setHelpStart "Usage: aecc [options] <file...>\n"
setHelpEnd "\tAll options not recognized by aecc, in addition to all files not
ending in .ae or .hae, are passed on to the underlying compiler.\n"

addOption no "ae-help" no none no empty printHelpAndExit "This message."
addOption no "ae-compiler" yes compiler no "<compiler path>" none "Path to the compiler to use.  Default specified at configure time."
addOption no "ae-pretty" no none no empty none "Have the parser output pretty code (no source lines)."
addOption no "ae-debug" no none no empty none "Enable debugging for the parser."
addOption no "ae-just-source" no none no empty none "Just generate C source and header files."
addOption no "ae-show-commands" no none no empty none "Show commands run."
addOption o "ae-output-file" yes outputfile no "<output file>" none "Specifies the output file [default=a.out]."
addOption no "ae-interm-file" yes intermfile no "<interm file>" none "Specifies the intermediate file."
addOption no "ae-from-interm" no none no empty none "Start from (existing) intermediate file."
addOption no "ae-parse-hae" no none no empty none "Generate a C .h header from an Aesop .hae header."
addOption no "ae-pre-compile" no none no empty none "Pre-compile aesop for syntax checking."

compiler=@CC@
parseropts=""
outputfile=a.out

parseOpts $@

clean=
addToClean()
{
    if test "${hasOpt_ae_pretty}" != "yes"; then
        clean="${clean} $1"
    fi
}

exitIfFailed()
{
    res=$1
    if test $res -ne 0; then
        doClean ${clean}
        exit $1
    fi
}

verbose=no
if test "${hasOpt_ae_show_commands}" = "yes"; then
    verbose=yes
fi

if test "${hasOpt_ae_pretty}" = "yes"; then
    parseropts="${parseropts} --pretty"
fi
if test "${hasOpt_ae_debug}" = "yes"; then
    parseropts="${parseropts} --debug"
fi

if test "${hasOpt_ae_parse_hae}" = "yes"; then
    if test "${hasOpt_ae_from_interm}" = "yes"; then
        echo "Can't specify to only compile intermediate with --parse-hae (-j)."
        showUsage 1
    fi
fi

if test "${hasOpt_ae_from_interm}" != "yes"; then
    
    # This makes assumptions about current PWD!
    #buildifile=$(echo "${INPUTFILES}" | sed -e "s|^ *${SRCDIR}||" | sed -e "s|^/||")

    buildifile=$(echo "${INPUTFILES}" | sed -e "s|^ *${SRCDIR}||")

    cppout=${buildifile}.i
    addToClean ${cppout}

    if test -z "${INPUTFILES}"; then
        echo "No input file specified!"
        showUsage 1
    fi

    # Step 1: first generate preprocessed file and dependency file
    doCPP ${verbose} ${compiler} ${INPUTFILES} ${cppout} ${outputfile} "${hasOpt_pre_compile}" ${COMPILEROPTS}
    exitIfFailed $?

    # Step 2: next run parser on preprocessed file
    if test -n "${intermfile}"; then
        poutfile=${intermfile}
    elif test "${hasOpt_ae_parse_hae}" = "yes"; then
        poutfile=${outputfile}
    else
        poutfile=${outputfile%.*}.s
        addToClean ${poutfile}
    fi

    if test "${hasOpt_ae_parse_hae}" = "yes"; then
        parseAesopHeader ${verbose} ${compiler} ${cppout} ${poutfile} "${INPUTFILES}" "${parseropts}" ${COMPILEROPTS}
        exitIfFailed $?
    else
        parseAesopSource ${verbose} ${compiler} ${cppout} ${poutfile} "${INPUTFILES}" "${parseropts}" ${COMPILEROPTS}
        exitIfFailed $?
    fi

    # if only source file (.c) or header (.h) was supposed to be generated, stop here
    if test "${hasOpt_ae_just_source}" = "yes" || test "${hasOpt_ae_parse_hae}" = "yes"; then
        doClean ${clean}
        exit 0
    fi
fi

compileinput=${poutfile}
if test -z "${compileinput}"; then
    if test -z "${intermfile}"; then
        echo "If only compiling, the intermediate file name must be specified."
        showUsage 1
    fi
    compileinput=${intermfile}
fi

doCompile ${verbose} ${compiler} ${compileinput} ${outputfile} ${COMPILEROPTS}
exitIfFailed $?

doClean ${clean}

exit 0

# Done!

# Local Variables:
# mode: sh
# sh-basic-offset: 4
# End:
