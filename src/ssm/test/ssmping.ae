/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#include <aesop/aesop.h>
#include <aesop/aesop-support.hae>
#include <aesop/aessm.hae>

/*
 * This test demonstrates a ping to a remote host.
 */
static __blocking int test_main (int argc, char **argv)
{
    aessm_t   ssm1;
    int       rc1;

    aessm_t   ssm2;
    ssm_me_id me2;
    ssm_evt_t evt2;
    int       rc2;

    // initialize for ping

    rc1 = aessm_initialize(&ssm1, AESSM_MODE_THREAD);
    assert(rc1 == AE_SUCCESS);

    pwait
    {
        // wait for ping
        pbranch
        {
            aesop_timer(1000);

            rc1 = aessm_finalize(&ssm1);
            assert(rc1 == AE_SUCCESS);
        }

        // post ping to remote
        pbranch
        {
            memset(&evt2, 0, sizeof(evt2));

            rc2 = aessm_initialize(&ssm2, AESSM_MODE_THREAD);
            assert(rc2 == AE_SUCCESS);

            rc2 = aessm_link (&ssm2,
                              //SSM_ME_SEND_ONLY,
                              0,
                              0,
                              0,
                              NULL, 
                              SSM_ME_POS_HEAD,
                              SSM_ME_NONE, 
                              0,
                              &me2);
            assert(rc2 == AE_SUCCESS);

            rc2 = aessm_ping(me2, ssm1.laddr_id, &evt2);
            assert(rc2 == AE_SUCCESS);
            assert(evt2.result == SSM_RESULT_SUCCESS);

            memset(&evt2, 0, sizeof(evt2));

            rc2 = aessm_unlink(me2, &evt2);
            assert(rc2 == AE_SUCCESS);
            assert(evt2.result == SSM_RESULT_SUCCESS);

            rc2 = aessm_finalize(&ssm2);
            assert(rc2 == AE_SUCCESS);
        }
    }

    printf("SUCCESS\n");
    return 0;
}

aesop_main_set(test_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
