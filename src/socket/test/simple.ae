found something!
/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#include <aesop/aesop.h>
#include <aesop/aesop-support.hae>
#include <aesop/timer.hae>
#include <aesop/aesocket.hae>

#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <assert.h>


static __blocking int test1 ()
{
   int fd;
   char filename[128];
   int err;
   int tret;

   strcpy (filename, "/tmp/aesocketXXXXXX");

   fd = mkstemp (filename);

   pwait
   {
     /* pbranch
      {
         tret = aesop_timer (100);
         assert (tret != AE_SUCCESS && "File did not become read??");
        // aesop_cancel_branches_wait ();
      } */
      pbranch
      {
         aesocket_ready (fd, AESOCKET_WRITE, &err);
         //aesop_cancel_branches_wait ();
      } 
   }

   close (fd);

   return 0;
}


static __blocking int doSendRecv (int * fd)
{
   size_t todo = 1024*1024*64;
   int ret = AE_SUCCESS;
   pwait
   {
      pbranch
      {
         int i;
         i=0;
         char buf[4096];
         int iter2 = 0;
         int r;
         int err;
         int tret;

         while (i < todo)
         {
            ++iter2;
            tret = aesocket_ready (fd[0], AESOCKET_READ, &err);
            if (tret != AE_SUCCESS)
            {
               ret = tret;
               printf ("Cancelled read!");
               pbreak;
            }
            printf ("R"); fflush (stdout);
            r= read (fd[0], &buf[0], sizeof(buf));
            if (r< 0)
            {
               perror ("read");
            }
            else
            {
               i += r;
            }
         }
      }
      pbranch
      {
         int i;
         int err;
         i=0;
         char buf[1024];
         memset (buf, 0, sizeof(buf));
         int w;
         int iter = 0;
         int tret;

         while (i< todo)
         {
            ++iter;
            tret = aesocket_ready (fd[1], AESOCKET_WRITE, &err);
            if (tret != AE_SUCCESS)
            {
               ret = tret;
               printf ("Cancelled write!");
               pbreak;
            }
            printf ("W"); fflush (stdout);
            w = write (fd[1], &buf[0], sizeof(buf));
            if (w < 0)
               perror ("write");
            i += w;
         }
      }
   }
   return ret;
}

static __blocking int test2 ()
{
   int fd[2];
   if (pipe (&fd[0]) < 0)
   {
      perror ("pipe");
      assert (0);
   }
   fcntl (fd[0], F_SETFL, O_NONBLOCK);
   fcntl (fd[1], F_SETFL, O_NONBLOCK);

   pwait
   {
      pbranch
      {
         int ret;
         ret = doSendRecv (fd);
         if (ret == AE_SUCCESS)
         {
            printf ("Test done... Cancelling timeout!\n");
            aesop_cancel_branches_wait ();
         }
         else
         {
            printf ("Test cancelled!\n");
         }
      }
      pbranch
      {
         int ret;
         ret = aesop_timer (10000);
         if (ret == AE_SUCCESS)
         {
            printf ("Cancelling!");
            aesop_cancel_branches_wait ();
         }
         else
         {
            printf ("Cancelling timer\n");
         }
      }
   }

   close (fd[0]);
   close (fd[1]);

   return 0;
}

static __blocking int dotest (int argc, char ** args)
{
   // aesop_set_debugging ("ae_blocking", 1);
   aesocket_init ();
   test1 ();
   test2 ();
   aesocket_finalize ();
   return 0;
}

aesop_main_set(dotest);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
