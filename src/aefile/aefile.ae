/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#define _GNU_SOURCE
#define _XOPEN_SOURCE 600

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

#include "src/aefile/aefile.hae"
#include "resources/thread/aethread.hae"
#include "resource.h"

/* TODO:
 * - make thread pool size configurable
 * - make operation fairness configurable
 * - make thread usage in metadata ops configurable 
 */

static struct aethread_group* file_threads = NULL;
static triton_mutex_t module_lock = TRITON_MUTEX_INITIALIZER;
static int module_refcount = 0;

#define AETHREAD_RUN() \
do { \
    int __ret; \
    __ret = aethread_hint(file_threads); \
    if(__ret == AE_ERR_SYSTEM) \
        return(-EIO); \
    if(__ret == AE_ERR_CANCELLED) \
        return(-EINTR); \
}while(0) 

int aefile_init(void)
{
    triton_mutex_lock(&module_lock);

    if(!module_refcount)
    {
        /* TODO: make this configurable */
        file_threads = aethread_create_group_pool(32);
        if(!file_threads)
        {
            triton_mutex_unlock(&module_lock);
            return(AE_ERR_SYSTEM);
        }
    }
    module_refcount++;
    triton_mutex_unlock(&module_lock);

    return(0);
}

void aefile_finalize(void)
{
    triton_mutex_lock(&module_lock);
    module_refcount--;

    if(!module_refcount)
    {
        aethread_destroy_group(file_threads);
    }
    triton_mutex_unlock(&module_lock);

    return;
}

__blocking int aefile_open(const char *pathname, int flags, mode_t mode)
{
    int ret;

    AETHREAD_RUN();

    ret = open(pathname, flags, mode);

    if(ret == -1)
    {
        ret = -errno;
    }
    
    return ret;
}

__blocking int aefile_close(int fd)
{
    int ret;

    AETHREAD_RUN();

    ret = close(fd);

    if(ret == -1)
    {
        ret = -errno;
    }
    
    return ret;
}


__blocking int aefile_fstat(int fd, struct stat *buf)
{
    int ret;

    AETHREAD_RUN();

    ret = fstat(fd, buf);

    if(ret == -1)
    {
        ret = -errno;
    }
    return ret;
}

__blocking ssize_t aefile_pwrite(int fd, const void *buf, size_t count, off_t offset)
{
    ssize_t ret;

    AETHREAD_RUN();

    ret = pwrite(fd, buf, count, offset);
    if(ret < 0)
    {
        ret = -errno;
    }

    return(ret);
}

__blocking ssize_t aefile_pread(int fd, void *buf, size_t count, off_t offset)
{
    ssize_t ret;

    AETHREAD_RUN();

    ret = pread(fd, buf, count, offset);
    if(ret < 0)
    {
        ret = -errno;
    }

    return(ret);
}

__blocking int aefile_fsync(int fd)
{
    int ret;

    AETHREAD_RUN();

    ret = fsync(fd);
    if(ret < 0)
    {
        ret = -errno;
    }

    return(ret);
}

__blocking int aefile_fdatasync(int fd)
{
    int ret;

    AETHREAD_RUN();

    ret = fdatasync(fd);
    if(ret < 0)
    {
        ret = -errno;
    }

    return(ret);
}

__blocking int aefile_ftruncate(int fd, off_t length)
{
    int ret;

    AETHREAD_RUN();

    ret = ftruncate(fd, length);
    if(ret < 0)
    {
        ret = -errno;
    }

    return(ret);
}

__blocking int aefile_unlink(const char *pathname)
{
    int ret;

    AETHREAD_RUN();

    ret = unlink(pathname);
    if(ret < 0)
    {
        ret = -errno;
    }

    return(ret);
}




/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
