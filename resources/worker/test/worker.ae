
/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#include <stdio.h>
#include <aesop.h>
#include "resources/worker/worker.h"
#include <aesop/timer.hae>

static int errors = 0;

static void optputs (const char * s)
{
   if (getenv ("DEBUG"))
      puts (s);
}

static void always_assert (int expr, const char * msg)
{
   if (!expr)
   {
      fprintf (stderr, "Assertion failed: %s\n", msg);
      ++errors;
   }
}

static int written = 0;

static void my_worker (void * data)
{
   written = (intptr_t) data;
}

static __blocking int dotest (void)
{
   aesop_worker_t * worker;

   aesop_worker_init ();

   worker = aesop_worker_register (my_worker, (void*) 6);
   aesop_worker_schedule (worker);

   /* worker should run as soon as we run out of things to do (or possibly
    * earlier) ... */
   aesop_timer (1000);
   always_assert (written == 6, "worker did not run!");

   aesop_worker_unregister (worker);

   aesop_worker_finalize ();

   return 0;
}

__blocking int test_main (int argc, char ** args)
{
   int ret;

   ret = aesop_timer_init();
   assert(ret == 0);

   dotest ();

   aesop_timer_finalize();
   return errors;
}

aesop_main_set (test_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
