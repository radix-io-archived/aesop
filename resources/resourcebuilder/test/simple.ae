#include <stdio.h>
#include "aesop.h"
#include "resources/resourcebuilder/resourcebuilder.hae"

static int errors = 0;

static void optputs (const char * s)
{
   if (getenv ("DEBUG"))
      puts (s);
}

static void always_assert (int expr, const char * msg)
{
   if (!expr)
   {
      fprintf (stderr, "Assertion failed: %s\n", msg);
      ++errors;
   }
}

static __blocking int dotest (void)
{
   rb_slot_t slot;
   rb_slot_t slot2;

   rb_slot_initialize (&slot);
   rb_slot_initialize (&slot2);

   pwait
   {
      pprivate int ret = 0;

      pbranch
      {
         ret = rb_slot_capture (&slot);
         always_assert (ret == AE_SUCCESS, "return code");
         optputs ("pbranch 1 completed");
      }

      pbranch
      {
         ret = rb_slot_capture (&slot2);
         always_assert (ret == AE_SUCCESS, "return code");
         optputs ("pbranch 2 completed");
      }

      pbranch
      {
         optputs ("completing slot 1");
         ret = rb_slot_complete (&slot);
         always_assert (ret == AE_SUCCESS, "return code");
         optputs ("completing slot 2");
         ret = rb_slot_complete (&slot2);
         always_assert (ret == AE_SUCCESS, "return code");
      }
   }
   optputs ("pwait completed");

   rb_slot_destroy (&slot);
   rb_slot_destroy (&slot2);
   return 0;
}

__blocking int test_main (int argc, char ** args)
{
   dotest ();
   return errors;
}

aesop_main_set (test_main, "resourcebuilder");
