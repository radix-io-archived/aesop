#include <unistd.h>
#include <sys/time.h>

#include "src/aesop/aesop.h"
#include "src/aesop/resources/timer/timer.hae"

triton_mutex_t mutex = TRITON_MUTEX_INITIALIZER;

static __blocking int triton_dosleep(void)
{
    pwait
    {
        int i;

        for(i = 0; i < 1000; ++i)
        {
            pbranch
            {
                triton_timer(1000);
            }
        }
    }

    return 0;
}

static int done = 0;
static int dosleep_ret;
static void done_cb(void *up, int ret)
{
    ae_context_t ctx = (ae_context_t)up;
    dosleep_ret = ret;
    done = 1;
    ae_poll_break(ctx);
}

static void *threadfun(void *cb)
{
    sleep(1);
    return NULL;
}

static void thread_dosleep(void)
{
    int i, ret;
    void *val;
    pthread_t tid[100];
    for(i = 0; i < 100; ++i)
    {
        ret = pthread_create(&tid[i], NULL, threadfun, NULL);
        if(ret != 0)
        {
            perror("pthread_create failed!\n");
            assert(ret == 0);
        }
    }

    for(i = 0; i < 100; ++i)
    {
        pthread_join(tid[i], &val);
    }

    return;
}



int main(int argc, char *argv[])
{
    int ret;
    ae_op_id_t op_id;
    ae_context_t ctx;
    ae_hints_t hints;
    struct timeval t1, t2, diff;

    triton_timer_init();

    ae_context_create(&ctx, "timer");

    gettimeofday(&t1, NULL);
    ae_hints_init(&hints);
    ret = ae_post_blocking(triton_dosleep, done_cb, ctx, &hints, ctx, &op_id, &dosleep_ret);
    if(ret == AE_SUCCESS)
    {
        while (done == 0)
        {
            ae_poll(ctx, 10);
        }
    }
    aesop_error_assert(ret);
    ae_hints_destroy(&hints);
    gettimeofday(&t2, NULL);
    diff.tv_sec = t2.tv_sec - t1.tv_sec;
    diff.tv_usec = t2.tv_usec - t1.tv_usec;
    if(t2.tv_usec < t1.tv_usec) 
    {
    	diff.tv_sec--;
	diff.tv_usec += 1e6;
    }
    printf("aesop time: %d.%06d secs\n", (int)diff.tv_sec, (int)diff.tv_usec);

    gettimeofday(&t1, NULL);
    thread_dosleep();
    gettimeofday(&t2, NULL);
    diff.tv_sec = t2.tv_sec - t1.tv_sec;
    diff.tv_usec = t2.tv_usec - t1.tv_usec;
    if(t2.tv_usec < t1.tv_usec) 
    {
    	diff.tv_sec--;
	diff.tv_usec += 1e6;
    }
    printf("thread time: %d.%06d secs\n", (int)diff.tv_sec, (int)diff.tv_usec);
    
    ae_context_destroy(ctx);
    triton_timer_finalize();
    return dosleep_ret;
}

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ts=8 sts=4 sw=4 expandtab
 */
