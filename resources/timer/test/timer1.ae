
#include <stdio.h>
#include "aesop.h"
#include "resources/timer/timer.hae"

static __blocking int dotimer(void)
{
    pwait
    {
        pbranch
        {
            printf("sleeping for 100 ms\n");
            triton_timer(100);
            printf("100 ms done.\n");
        }

        pbranch
        {
            printf("sleeping for 1000 ms\n");
            triton_timer(1000);
            printf("1000 ms done.\n");
        }

        pbranch
        {
            printf("sleeping for 10 ms\n");
            triton_timer(10);
            printf("10 ms done.\n");
        }
    }
    return 0;
}

int done = 0;
int dotimer_ret;

static void done_callback(void *up, int ret)
{
    ae_context_t ctx = (ae_context_t)up;
    done = 1;
    dotimer_ret = ret;
    ae_poll_break(ctx);
}

int main(int argc, char *argv[])
{
    int ret;
    ae_hints_t hints;
    ae_context_t ctx;
    int pc = 0;
    ae_op_id_t op_id;

    triton_timer_init();
    ae_context_create(&ctx, "timer");

    ae_hints_init(&hints);
    ret = ae_post_blocking(dotimer, done_callback, ctx, &hints, ctx, &op_id, &dotimer_ret);
    if(ret == AE_SUCCESS)
    {
        while(done == 0)
        {
            ae_poll(ctx, 10);
            printf("polled %d times\n", ++pc);
        }
    }
    aesop_error_assert(ret);

    ae_hints_destroy(&hints);
    ae_context_destroy(ctx);
    triton_timer_finalize();

    return dotimer_ret;
}

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
