
#include <stdio.h>
#include "aesop.h"
#include "resources/timer/timer.hae"

int exit_loop = 0;

static __blocking int receiver()
{
    int i = 0;
    printf("receiver\n");

    pwait
    {
        pbranch
        {
            while(!exit_loop)
            {
                printf("recving...\n");
                triton_timer(100);
            }
        }
        pbranch
        {
            while(!exit_loop)
            {
                printf("sleeping...\n");
                triton_timer(100);
                if (i++ == 10)
                {
                    exit_loop = 1;
                }
            }
        }
    }

    return 0;
}

int done = 0;
int receiver_ret;

static void done_callback(void *user_ptr, int ret)
{
    ae_context_t ctx = (ae_context_t)user_ptr;
    done = 1;
    receiver_ret = ret;
    ae_poll_break(ctx);
}

int main(int argc, char *argv[])
{
    int ret;
    ae_op_id_t op_id;
    ae_context_t ctx;
    ae_hints_t hints;

    triton_timer_init();

    ae_context_create(&ctx, "timer");

    printf("ready\n");

    ae_hints_init(&hints);
    ret = ae_post_blocking(receiver, done_callback, ctx, &hints, ctx, &op_id, &receiver_ret);
    if(ret == AE_SUCCESS)
    {
        while (done == 0)
        {
            ae_poll(ctx, 10);
        }
    }
    aesop_error_assert(ret);
    ae_hints_destroy(&hints);

    printf("done\n");

    ae_context_destroy(ctx);
    return receiver_ret;
}

/*
 * Local Variables:
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
