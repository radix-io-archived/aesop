/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */


#include <stdio.h>
#include <unistd.h>
#include <sys/time.h>

#include <aesop/aesop.h>
#include <aesop/aethread.hae>
#include <aesop/timer.hae>
#include <aesop/aesop-support.hae>

static double wtime(void)
{
    struct timeval t;
    gettimeofday(&t, (void *) 0);
    return ( (double) t.tv_sec + ( (double) t.tv_usec / 1000000 ) );
}

static __blocking int dotest(void)
{
    struct aethread_group* agroup;
    double start, end;

    /* thread group with 2 threads */
    agroup = aethread_create_group_pool(2);
    assert(agroup);

    start = wtime();
    /* branch that starts three sleeps of 3 seconds each.  Without cancel
     * support, it will take 6 seconds to complete (because only 2 ops fit
     * in the thread group at a time).  With cancel support it should take 3
     * seconds because we will be able to cancel one in the queue.
     */
    pwait
    {
        pprivate int ret;

        pbranch
        {
            ret = aethread_hint(agroup);
            if(ret != AE_ERR_CANCELLED)
                sleep(3);
            else
                printf("pbranch cancelled.\n");
        }

        pbranch
        {
            ret = aethread_hint(agroup);
            if(ret != AE_ERR_CANCELLED)
                sleep(3);
            else
                printf("pbranch cancelled.\n");
        }

        pbranch
        {
            ret = aethread_hint(agroup);
            if(ret != AE_ERR_CANCELLED)
                sleep(3);
            else
                printf("pbranch cancelled.\n");
        }
        
        pbranch
        {
            /* wait 100 milliseconds to make sure that some threads begin
             * service 
             */
            aesop_timer(100); 

            /* cancel what we can */
            aesop_cancel_branches_wait();
        }
    }
    end = wtime();

    printf("First example (should be about 3 seconds): %f seconds.\n", (end-start));

    aethread_destroy_group(agroup);
    return 0;
}

__blocking int aesop_main(int argc, char **argv)
{
    int ret;

    ret = dotest();
    if(ret == 0)
        printf("Success.\n");
    else
        printf("Failure.\n");

    return(ret);
}

aesop_main_set(aesop_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
