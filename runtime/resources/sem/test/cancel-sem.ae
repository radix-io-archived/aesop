/*
 * (C) 2009 The University of Chicago
 *
 * See COPYRIGHT in top-level directory.
 */

#include <stdio.h>
#include "aesop.h"
#include "resources/sem/sem.hae"

static int errors = 0;

static void optputs (const char * s)
{
   if (getenv ("DEBUG"))
      puts (s);
}

static void always_assert (int expr, const char * msg)
{
   if (!expr)
   {
      fprintf (stderr, "Assertion failed: %s\n", msg);
      ++errors;
   }
}

static __blocking int cancel1 (void)
{
   aesop_sem_t sem;

   optputs ("==== Test cancel1 ====");

   aesop_sem_init (&sem, 0);

   pwait
   {
      pprivate int ret = 0;

      pbranch
      {
         optputs ("pb1: down");
         ret = aesop_sem_down (&sem);
         always_assert (ret != AE_SUCCESS, "cancel");
         optputs ("pbranch 1 completed");
      }

      pbranch
      {
         optputs ("cancelling branches");
         aesop_cancel_branches ();
      }
   }
   optputs ("pwait completed");

   aesop_sem_destroy (&sem);
   return 0;
}

static __blocking int cancel2unrelated (void)
{
   aesop_sem_t sem1;
   aesop_sem_t sem2;

   optputs ("==== Test cancel2unrelated ====");

   aesop_sem_init (&sem1, 0);
   aesop_sem_init (&sem2, 0);

   pwait
   {
      pprivate int ret = 0;

      pbranch
      {
         optputs ("pb1: down sem1");
         ret = aesop_sem_down (&sem1);
         always_assert (ret != AE_SUCCESS, "cancel");
         optputs ("pbranch 1 completed");
      }

      pbranch
      {
         optputs ("pb2: down sem2");
         ret = aesop_sem_down (&sem2);
         always_assert (ret != AE_SUCCESS, "cancel");
         optputs ("pbranch 2 completed");
      }

      pbranch
      {
         optputs ("cancelling branches");
         aesop_cancel_branches ();
      }
   }
   optputs ("pwait completed");

   aesop_sem_destroy (&sem1);
   aesop_sem_destroy (&sem2);
   return 0;
}

static __blocking int cancel2 (void)
{
   aesop_sem_t sem;

   optputs ("==== Test cancel2 ====");

   aesop_sem_init (&sem, 0);

   pwait
   {
      pprivate int ret = 0;

      pbranch
      {
         optputs ("pb1: down");
         ret = aesop_sem_down (&sem);
         always_assert (ret != AE_SUCCESS, "cancel");
         optputs ("pbranch 1 completed");
      }

      pbranch
      {
         optputs ("pb2: down");
         ret = aesop_sem_down (&sem);
         always_assert (ret != AE_SUCCESS, "cancel");
         optputs ("pbranch 2 completed");
      }

      pbranch
      {
         optputs ("cancelling branches");
         aesop_cancel_branches ();
      }
   }
   optputs ("pwait completed");

   aesop_sem_destroy (&sem);
   return 0;
}

__blocking int test_main (int argc, char ** args)
{
   aesop_sem_module_init ();
   cancel1 ();
   cancel2unrelated ();
   cancel2 ();
   aesop_sem_module_finalize ();
   return 0;
}

aesop_main_set (test_main);

/*
 * Local variables:
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
