#!/bin/sh

#
# Runs each test listed on the commandline, watching the process and killing after a timeout.
# Outputs TAP format
#

TEST_RUNNER="@TIMEOUT_PROG@"

opt_verbose=
opt_timeout=600
opt_outputfile=
opt_kill="$((opt_timeout+60))"
while getopts vk:t:o: name
do
    case $name in
    t)    opt_timeout="$OPTARG";;
    v)    opt_verbose=1 ;;
    k)    opt_kill="$OPTARG";;
    o)    opt_outputfile="$OPTARG";;
    ?)   printf "Usage: %s: [-o outputfile] [-v] [-t timeout] test test test\n" $0
          exit 2;;
    esac
done
shift $(($OPTIND - 1))

TESTCOUNT=$#

# 3 is for TAP output
if test -z "$opt_outputfile"  ; then
   exec 3>&0;
else
   exec 3>${opt_outputfile};
fi

# 4 is for program stdout
# 5 is for program stderr
if test -z "$opt_verbose" ; then
   exec 4>/dev/null;
#   exec 5>/dev/null;
else
   exec 4>&0;
#   exec 2>&5;
fi

echo "1..${TESTCOUNT}" >&3

testnumber=0

for test in $*; do
   testnumber=$((testnumber+1))
   ${TEST_RUNNER} -k ${opt_kill} $opt_timeout "$test" >&4
   ret=$?
   tap="not ok"
   directive=""
   case ${ret} in
      0) tap="ok" status="ok";;
    130) status="[interrupted]"; directive="# Ctrl-C received; test interrupted" ;;
    124) status="TIMEOUT"; directive="#timeout" ;;
    137) status="TIMEOUT(KILL)"; directive="#timeout-killed" ;;
   esac
   echo "${tap} ${testnumber} - ${test} ${directive}" >&3
   echo -e "    # ${status}\t [${testnumber}/${TESTCOUNT}] - $test" >&2

   if test "${ret}" -eq 130; then
      echo "Ctrl-C received. Stopping tests"
      exit 2
   fi
done


